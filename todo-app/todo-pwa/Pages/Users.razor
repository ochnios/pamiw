@page "/users"
@inject HttpClient Http
@using todo_pwa.Models;


<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (results == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-lg-7 col-md-7 col-sm-12">
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Surname</th>
                        <th>Email</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in results.Data)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td>@user.Surname</td>
                            <td>@user.Email</td>
                            <td>
                                <button @onclick="@(()=>GetUser(@user.Id))" class="btn btn-sm btn-primary">Edit</button>
                            </td>
                            <td>
                                <button @onclick="@(()=>DeleteUser(@user.Id))" class="btn btn-sm btn-primary">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                            <button class="page-link" aria-label="Previous" disabled="@IsPreviousDisabled" @onclick="PreviousPage">
                                <span aria-hidden="true">Previous</span>
                            </button>
                        </li>
                        <li class="page-item disabled"><a class="page-link">Page @results.CurrentPage of @results.TotalPages</a></li>
                        <li class="page-item">
                            <button class="page-link" aria-label="Next" disabled="@IsNextDisabled" @onclick="NextPage">
                                <span aria-hidden="true">Next</span>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>

        <div class="col-lg-1 col-md-1 col-sm-12">&nbsp;</div>

        <div class="col-lg-4 col-md-4 col-sm-12">
            <h3>Add User</h3>
            <br>
            <input type="text" @bind-value="newUser.Name" class="form-control mb-3" placeholder="Enter Name" />
            <input type="text" @bind-value="newUser.Surname" class="form-control mb-3" placeholder="Enter Surname" />
            <input type="text" @bind-value="newUser.Email" class="form-control mb-3" placeholder="Enter Email" />
            <button class="btn btn-block btn-primary" @onclick="SubmitUser">Submit</button>
        </div>
    </div>
}

@code {
    private Results<User> results;
    private User newUser = new User();
    private bool edit = false;

    private bool IsPreviousDisabled => results.CurrentPage == 1;
    private bool IsNextDisabled => results.CurrentPage >= results.TotalPages;
    private int pageNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task SubmitUser()
    {
        if (edit == false)
        {
            await Http.PostAsJsonAsync<User>("users", newUser);
            await OnInitializedAsync();
            newUser = new User();
        }
        else
        {
            await Http.PatchAsJsonAsync<User>("users/" + newUser.Id, newUser);
            await OnInitializedAsync();
            edit = false;
            newUser = new User();
        }
    }
    private async Task DeleteUser(int id)
    {
        await Http.DeleteAsync("users/" + id.ToString());
        await OnInitializedAsync();
    }

    private async Task GetUser(int id)
    {
        newUser = await Http.GetFromJsonAsync<User>("users/" + id.ToString());
        edit = true;

    }

    private async Task LoadPage()
    {
        results = await Http.GetFromJsonAsync<Results<User>>($"users?pageNumber={pageNumber}");
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await LoadPage();
        }
    }

    private async Task NextPage()
    {
        if (pageNumber < results.TotalPages)
        {
            pageNumber++;
            await LoadPage();
        }
    }
}
